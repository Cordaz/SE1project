package it.polimi.ingsw.BianchiCorneo.supervisor;

import it.polimi.ingsw.BianchiCorneo.actions.Action;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**Notification, server-side, class.
 * Provides all the methods to notify the clients, via socket o RMI interfaces
 * @author Andrea Corneo
 *
 */
public class ClientMonitor {
	private List<ClientHandler> clients;
	private Action notification;
	private String endMessage;
	
	/**Constructor
	 * 
	 */
	public ClientMonitor() {
		clients = new ArrayList<ClientHandler>();
	}
	
	/**Used by socket client, via ClientHandler to subscribe to the notifier
	 * @param client
	 */
	public void subscribe(ClientHandler client) {
		clients.add(client);
	}
	
	/**Invoked by the supervisor to notify an action to all the clients
	 * @param a action happened
	 */
	public void notifyAction(Action a) {
		this.notification = a;
		for(ClientHandler c : clients) {
			synchronized (c) {
				c.notifyAction(notification);
				c.notify();
				try {
					c.wait();
				} catch (InterruptedException e) {
					Logger.getGlobal().log(Level.ALL, "Error.", e);
				}
			}
		}
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			Logger.getGlobal().log(Level.ALL, "Error.", e);
		}
	}
	
	/**Notify the end of the game, sending also the end message generated by the supervisor
	 * @param message of end
	 */
	public void notifyEnd(String message) {
		endMessage = message;
		for(ClientHandler c : clients) {
			synchronized (c) {
				c.notifyEnd(endMessage);
				c.notify();
				try {
					c.wait();
				} catch (InterruptedException e) {
					Logger.getGlobal().log(Level.ALL, "Error.", e);
				}
			}
		}
	}
	
	/**Standard getter for the action
	 * @return action happened in this notification
	 */
	public Action getNotification() {
		return notification;
	}

	/**Standard getter for the end message
	 * @return the message generated by the supervisor at the end of the game
	 */
	public String getEnd() {
		return endMessage;
	}
}
